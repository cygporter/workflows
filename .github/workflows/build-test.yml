name: Build and test
on:
  workflow_call:
    inputs:
      cygport_file:
        description: Path to the cygport file
        required: true
        type: string
      bootstrap_packages:
        description: Cygwin packages required to parse the cygport file
        required: false
        type: string
        default: cygport
      ref:
        description: Git ref to check out, build and test
        required: false
        type: string
        default: ''
      compress_results:
        description: If and how to compress build results
        required: false
        type: string
        default: ''
    outputs:
      cygport-pv:
        description: The $PV value from the cygport file
        value: ${{ jobs.build-test.outputs.pv }}
      cygport-pvr:
        description: The $PVR value from the cygport file
        value: ${{ jobs.build-test.outputs.pvr }}

jobs:
  build-test:
    name: Build and test
    runs-on: windows-latest
    env:
      CYGPORT_FILE: ${{ inputs.cygport_file }}
    outputs:
      pv: ${{ steps.data.outputs.pv }}
      pvr: ${{ steps.data.outputs.pvr }}
    steps:

      - name: Verify options
        shell: bash
        env:
          COMPRESS_RESULTS: ${{ inputs.compress_results }}
        run: |
          case "$COMPRESS_RESULTS" in
            '')
              echo TAR_COMPRESSION_ARG=
              echo TAR_FILE_SUFFIX=
              ;;
            j|bzip|bzip2)
              echo TAR_COMPRESSION_ARG=-j
              echo TAR_FILE_SUFFIX=.bz2
              ;;
            J|xz)
              echo TAR_COMPRESSION_ARG=-J
              echo TAR_FILE_SUFFIX=.xz
              ;;
            lz|lzip)
              echo TAR_COMPRESSION_ARG=--lzip
              echo TAR_FILE_SUFFIX=.lz
              ;;
            lzma)
              echo TAR_COMPRESSION_ARG=--lzma
              echo TAR_FILE_SUFFIX=.lzma
              ;;
            lzo|lzop)
              echo TAR_COMPRESSION_ARG=--lzop
              echo TAR_FILE_SUFFIX=.lzop
              ;;
            z|gz|gzip)
              echo TAR_COMPRESSION_ARG=-z
              echo TAR_FILE_SUFFIX=.gz
              ;;
            Z|compress)
              echo TAR_COMPRESSION_ARG=-Z
              echo TAR_FILE_SUFFIX=.Z
              ;;
            zst|zstd)
              echo TAR_COMPRESSION_ARG=--zstd
              echo TAR_FILE_SUFFIX=.zst
              ;;
            *)
              printf "::error::Unexpected compression option %q\n" "$COMPRESS_RESULTS" >&2
              exit 64  # EX_USAGE
              ;;
          esac | tee -a "$GITHUB_ENV"

      - name: Configure Git for Windows' core.autocrlf
        run: git config --global core.autocrlf input

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      # In the name of speed, pull packages from a previous cache on GitHub's
      # servers if one exists, rather than hitting the Cygwin mirrors.
      #
      # Ideally we'd cache the actual Cygwin installation, to avoid the need to
      # unpack and install the packages, as well as the need to download them,
      # but the cache action uses Git tar, which copes poorly with the symlinks
      # in the Cygwin installation directory, and there's a bootstrap problem
      # with using Cygwin's tar for that purpose!
      #
      # We always want to update the cache, as there might have been package
      # updates since the previous store was cached, so use the trick from [0]
      # to ensure that happens.
      # [0]: https://github.com/actions/cache/blob/6fd2d4538ca777f67fccddb233cf1a8ff1339012/tips-and-workarounds.md#update-a-cache
      - name: Use Cygwin package cache
        uses: actions/cache/restore@v3
        with:
          key: cygwin-packages-${{ github.run_id }}-${{ github.run_attempt }}
          path: C:\cygwin-packages
          restore-keys: |
            cygwin-packages-${{ github.run_id }}-
            cygwin-packages-

      # Compute a checksum for the current package cache, so we can check if we
      # need to store a new cache, rather than filling the cache with identical
      # stores.
      - name: Compute package cache checksum
        working-directory: C:\
        shell: bash
        run: |
          if [[ -d cygwin-packages ]]; then
            find cygwin-packages -type f ! -name setup.ini -print0 |
              sort -z |
              xargs -0 b2sum >cygwin-package-checksum.old
          fi

      - name: Install bootstrap packages
        id: install-bootstrap
        uses: cygwin/cygwin-install-action@db475590d56881c6cef7b3f96f6f3dd9532ea1f4
        with:
          packages: ${{ inputs.bootstrap_packages }}
          add-to-path: false

      - name: Load data from cygport file
        id: data
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: |
          vars_data="$(__cygport_check_prog_req_nonfatal=Yes cygport "$CYGPORT_FILE" vars ARCH PF PV PVR BUILD_REQUIRES)"
          printf '%s\n' "$vars_data"
          eval "$vars_data"

          printf 'CYGPORT_BUILD_REQUIRES=%s\n' "$BUILD_REQUIRES" | tee -a "$GITHUB_ENV"

          build_dir="$(dirname "$CYGPORT_FILE")/${PF}.${ARCH}"
          win_build_dir="$(cygpath -aw "$build_dir")"
          printf 'CYGPORT_BUILD_DIR=%s\n' "$build_dir" | tee -a "$GITHUB_ENV"
          printf 'CYGPORT_WIN_BUILD_DIR=%s\n' "$win_build_dir" | tee -a "$GITHUB_ENV"

          printf 'pv=%s\n' "$PV" | tee -a "$GITHUB_OUTPUT"
          printf 'pvr=%s\n' "$PVR" | tee -a "$GITHUB_OUTPUT"

      - name: Install Cygwin build requirements
        uses: cygwin/cygwin-install-action@db475590d56881c6cef7b3f96f6f3dd9532ea1f4
        with:
          packages: ${{ env.CYGPORT_BUILD_REQUIRES }}
          add-to-path: false

      # Check if the package downloads have changed if there's any chance we've
      # managed to reasonably update them.
      - name: Check if package cache needs updating
        if: always() && steps.install-bootstrap.outcome == 'success'
        working-directory: C:\
        shell: bash
        run: |
          if [[ -d cygwin-packages ]]; then
            find cygwin-packages -type f ! -name setup.ini -print0 |
              sort -z |
              xargs -0 b2sum >cygwin-package-checksum.new
            if ! diff cygwin-package-checksum.old cygwin-package-checksum.new; then
              echo UPDATE_CYGWIN_PACKAGE_CACHE=YesPlease | tee -a "$GITHUB_ENV"
            fi
          fi

      - name: Store package cache
        if: always() && env.UPDATE_CYGWIN_PACKAGE_CACHE == 'YesPlease'
        uses: actions/cache/save@v3
        with:
          key: cygwin-packages-${{ github.run_id }}-${{ github.run_attempt }}
          path: C:\cygwin-packages

      # Some cygport commands might use git commands.  This is necessary to
      # make sure they don't error out.
      - name: Configure Git safe.directory
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: |
          git config --global --add safe.directory '*' || :

      - name: Generate cygcheck output
        if: always() && steps.install-bootstrap.outcome != 'skipped'
        run: C:\cygwin\bin\cygcheck.exe -srv >C:\cygwin\var\log\cygcheck.out

      - name: Store Cygwin logs
        if: always() && steps.install-bootstrap.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: cygwin-logs
          path: C:\cygwin\var\log\

      - name: Cygport download
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" download

      - name: Cygport prep
        id: cygport-prep
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" prep

      - name: Cygport compile
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" compile

      - name: Cygport test
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" test

      - name: Cygport install
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" install

      - name: Cygport package
        id: cygport-package
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" package

      # Need to tar this up because we care about permissions and symlinks and
      # so forth that Cygwin's tar can maintain but which
      # actions/upload-artifact can't.
      - name: Tar up build results
        if: always() && steps.cygport-prep.outcome != 'skipped'
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: tar -cv $TAR_COMPRESSION_ARG -f /cygdrive/c/build-results.tar"$TAR_FILE_SUFFIX" "$CYGPORT_BUILD_DIR"

      - name: Store build results
        if: always() && steps.cygport-prep.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: build-results
          path: C:\build-results.tar${{ env.TAR_FILE_SUFFIX }}
          if-no-files-found: error

      - name: Store distribution packages
        if: steps.cygport-package.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: dist-packages
          path: ${{ env.CYGPORT_WIN_BUILD_DIR }}\dist
          if-no-files-found: error
