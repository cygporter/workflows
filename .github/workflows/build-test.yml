name: Build and test
on:
  workflow_call:
    inputs:
      cygport_file:
        description: Path to the cygport file
        required: true
        type: string
      bootstrap_packages:
        description: Cygwin packages required to parse the cygport file
        required: false
        type: string
        default: cygport
    outputs:
      pv:
        description: The $PV value from the cygport file
        value: ${{ jobs.build-test.outputs.pv }}
      cache-found:
        description: Whether an existing build cache was found and used
        value: ${{ jobs.build-test.outputs.cache-found }}

jobs:
  build-test:
    name: Build and test
    runs-on: windows-latest
    env:
      CYGPORT_FILE: ${{ inputs.cygport_file }}
    outputs:
      pv: ${{ steps.data.outputs.PV }}
      cache-found: ${{ steps.build-cache.outputs.cache-hit == 'true' }}
    steps:

      - name: Configure Git for Windows' core.autocrlf
        run: git config --global core.autocrlf input

      - name: Checkout
        uses: actions/checkout@v3

      # In the name of speed, pull packages from a previous cache on GitHub's
      # servers if one exists, rather than hitting the Cygwin mirrors.
      #
      # Ideally we'd cache the actual Cygwin installation, to avoid the need to
      # unpack and install the packages, as well as the need to download them,
      # but the cache action uses Git tar, which copes poorly with the symlinks
      # in the Cygwin installation directory, and there's a bootstrap problem
      # with using Cygwin's tar for that purpose!
      #
      # We always want to update the cache, as there might have been package
      # updates since the previous store was cached, so use the trick from [0]
      # to ensure that happens.
      # [0]: https://github.com/actions/cache/blob/6fd2d4538ca777f67fccddb233cf1a8ff1339012/tips-and-workarounds.md#update-a-cache
      - name: Use Cygwin package cache
        uses: actions/cache/restore@v3
        with:
          key: cygwin-packages-${{ github.run_id }}-${{ github.run_attempt }}
          path: C:\cygwin-packages
          restore-keys: |
            cygwin-packages-${{ github.run_id }}-
            cygwin-packages-

      # Compute a checksum for the current package cache, so we can check if we
      # need to store a new cache, rather than filling the cache with identical
      # stores.
      - name: Compute package cache checksum
        working-directory: C:\
        shell: bash
        run: |
          if [[ -d cygwin-packages ]]; then
            find cygwin-packages -type f ! -name setup.ini -print0 |
              sort -z |
              xargs -0 b2sum >cygwin-package-checksum.old
          fi

      - name: Install bootstrap packages
        id: install-bootstrap
        uses: cygwin/cygwin-install-action@db475590d56881c6cef7b3f96f6f3dd9532ea1f4
        with:
          packages: ${{ inputs.bootstrap_packages }}
          add-to-path: false

      - name: Load data from cygport file
        id: data
        uses: cygporter/actions/vars@main
        with:
          cygport_file: ${{ inputs.cygport_file }}
          vars: NAME PF PV ARCH BUILD_REQUIRES
          cygwin_bin_path: C:\cygwin\bin

      # Cache hit here means we can skip most of the rest of this job, since
      # this job is essentially building this cache.
      - name: Use build cache
        id: build-cache
        uses: actions/cache@v3
        with:
          key: ${{ steps.data.outputs.NAME }}-build-${{ github.sha }}
          path: build-results.tar

      - name: Install Cygwin build requirements
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: cygwin/cygwin-install-action@db475590d56881c6cef7b3f96f6f3dd9532ea1f4
        with:
          packages: ${{ steps.data.outputs.BUILD_REQUIRES }}
          add-to-path: false

      # Check if the package downloads have changed if there's any chance we've
      # managed to reasonably update them.
      - name: Check if package cache needs updating
        if: always() && steps.install-bootstrap.outcome == 'success'
        working-directory: C:\
        shell: bash
        run: |
          if [[ -d cygwin-packages ]]; then
            find cygwin-packages -type f ! -name setup.ini -print0 |
              sort -z |
              xargs -0 b2sum >cygwin-package-checksum.new
            if ! diff cygwin-package-checksum.old cygwin-package-checksum.new; then
              echo UPDATE_CYGWIN_PACKAGE_CACHE=YesPlease | tee -a "$GITHUB_ENV"
            fi
          fi

      - name: Store package cache
        if: always() && env.UPDATE_CYGWIN_PACKAGE_CACHE == 'YesPlease'
        uses: actions/cache/save@v3
        with:
          key: cygwin-packages-${{ github.run_id }}-${{ github.run_attempt }}
          path: C:\cygwin-packages

      - name: Generate cygcheck output
        if: always() && steps.install-bootstrap.outcome != 'skipped'
        run: C:\cygwin\bin\cygcheck.exe -srv >C:\cygwin\var\log\cygcheck.out

      - name: Store Cygwin logs
        if: always() && steps.install-bootstrap.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: cygwin-logs
          path: C:\cygwin\var\log\

      - name: Cygport download
        if: steps.build-cache.outputs.cache-hit != 'true'
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" download

      - name: Cygport prep
        if: steps.build-cache.outputs.cache-hit != 'true'
        id: cygport-prep
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" prep

      - name: Cygport compile
        if: steps.build-cache.outputs.cache-hit != 'true'
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" compile

      - name: Cygport test
        if: steps.build-cache.outputs.cache-hit != 'true'
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" test

      - name: Cygport install
        if: steps.build-cache.outputs.cache-hit != 'true'
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" install

      - name: Cygport package
        if: steps.build-cache.outputs.cache-hit != 'true'
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "$CYGPORT_FILE" package

      - name: Tar up build results
        if: always() && steps.cygport-prep.outcome != 'skipped'
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: tar -cvf build-results.tar "$CYGPORT_BUILD_DIR"

      - name: Store build results
        if: always() && steps.cygport-prep.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: build-results
          path: build-results.tar
          if-no-files-found: error
