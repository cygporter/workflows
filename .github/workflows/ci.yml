name: Build and test
on:
  workflow_call:
    inputs:
      cygport_file:
        description: Path to the cygport file
        required: true
        type: string
      bootstrap_packages:
        description: Cygwin packages required to parse the cygport file
        required: false
        type: string
        default: cygport

jobs:
  build-test:
    name: Build and test
    runs-on: windows-latest
    steps:

      - name: Configure Git for Windows' core.autocrlf
        run: git config --global core.autocrlf input

      - name: Checkout
        uses: actions/checkout@v3

      # In the name of speed, pull packages from a previous cache on GitHub's
      # servers if one exists, rather than hitting the Cygwin mirrors.
      #
      # Ideally we'd cache the actual Cygwin installation, to avoid the need to
      # unpack and install the packages, as well as the need to download them,
      # but the cache action uses Git tar, which copes poorly with the symlinks
      # in the Cygwin installation directory, and there's a bootstrap problem
      # with using Cygwin's tar for that purpose!
      #
      # We always want to update the cache, as there might have been package
      # updates since the previous store was cached, so use the trick from [0]
      # to ensure that happens.
      # [0]: https://github.com/actions/cache/blob/6fd2d4538ca777f67fccddb233cf1a8ff1339012/tips-and-workarounds.md#update-a-cache
      - name: Use Cygwin package cache
        uses: actions/cache/restore@v3
        with:
          key: cygwin-packages-${{ github.run_id }}-${{ github.run_attempt }}
          path: 'C:\cygwin-packages'
          restore-keys: |
            cygwin-packages-${{ github.run_id }}-
            cygwin-packages-

      # Compute a checksum for the current package cache, so we can check if we
      # need to store a new cache, rather than filling the cache with identical
      # stores.
      - name: Compute package cache checksum
        working-directory: 'C:\'
        shell: bash
        run: |
          if [[ -d cygwin-packages ]]; then
            find cygwin-packages -type f '!' -name setup.ini -print0 |
              sort -z |
              xargs -0 b2sum >cygwin-package-checksum.old
          fi

      - name: Install bootstrap packages
        id: install-bootstrap
        uses: cygwin/cygwin-install-action@db475590d56881c6cef7b3f96f6f3dd9532ea1f4
        with:
          packages: ${{ inputs.bootstrap_packages }}
          add-to-path: false

      - name: Load build requirements from cygport file
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: |
          eval "$(cygport "${{ inputs.cygport_file }}" vars NAME PF ARCH BUILD_REQUIRES)"
          printf 'CYGPORT_NAME=%s\n' "$NAME" >>"$GITHUB_ENV"
          printf 'CYGPORT_PF=%s\n' "$PF" >>"$GITHUB_ENV"
          printf 'CYGPORT_ARCH=%s\n' "$ARCH" >>"$GITHUB_ENV"
          printf 'CYGPORT_BUILD_REQUIRES=%s\n' "$BUILD_REQUIRES" >>"$GITHUB_ENV"

      - name: Install Cygwin build requirements
        id: install-build-reqs
        uses: cygwin/cygwin-install-action@db475590d56881c6cef7b3f96f6f3dd9532ea1f4
        with:
          packages: ${{ env.CYGPORT_BUILD_REQUIRES }}
          add-to-path: false

      # Check if the package downloads have changed if there's any chance we've
      # managed to reasonably update them.
      - name: Check if package cache needs updating
        if: always() && steps.install-bootstrap.outcome == 'success'
        working-directory: 'C:\'
        shell: bash
        run: |
          if [[ -d cygwin-packages ]]; then
            find cygwin-packages -type f '!' -name setup.ini -print0 |
              sort -z |
              xargs -0 b2sum >cygwin-package-checksum.new
            if ! diff cygwin-package-checksum.old cygwin-package-checksum.new; then
              printf 'UPDATE_CYGWIN_PACKAGE_CACHE=YesPlease' >>"$GITHUB_ENV"
            fi
          fi

      - name: Store package cache
        if: always() && env.UPDATE_CYGWIN_PACKAGE_CACHE == 'YesPlease'
        uses: actions/cache/save@v3
        with:
          key: cygwin-packages-${{ github.run_id }}-${{ github.run_attempt }}
          path: 'C:\cygwin-packages'

      - name: Generate cygcheck output
        if: always() && steps.install-bootstrap.outcome == 'success'
        run: C:\cygwin\bin\cygcheck.exe -srv >C:\cygwin\var\log\cygcheck.out

      - name: Store Cygwin logs
        if: always() && (steps.install-bootstrap.outcome == 'success' || steps.install-bootstrap.outcome == 'failure')
        uses: actions/upload-artifact@v3
        with:
          name: cygwin-logs
          path: 'C:\cygwin\var\log\'

      - name: Cygport download
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "${{ inputs.cygport_file }}" download

      - name: Cygport prep
        id: cygport-prep
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "${{ inputs.cygport_file }}" prep

      - name: Cygport compile
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "${{ inputs.cygport_file }}" compile

      - name: Cygport test
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "${{ inputs.cygport_file }}" test

      - name: Cygport install
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "${{ inputs.cygport_file }}" install

      - name: Cygport package
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: cygport "${{ inputs.cygport_file }}" package

      - name: Tar up build results
        if: always()
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: tar -cvf build-results.tar "${CYGPORT_PF}.${CYGPORT_ARCH}/"

      - name: Store build results
        if: always() && steps.cygport-prep.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: build-results
          path: build-results.tar
          if-no-files-found: error

      # Artifacts are great for letting me download the files, and passing
      # files between jobs in the same action, but not for passing files
      # between actions.  Cache the build results so they can be used by a
      # separate release action.
      - name: Cache build results
        if: startsWith(github.ref, 'refs/heads/')
        uses: actions/cache/save@v3
        with:
          key: ${{ env.CYGPORT_NAME }}-build-${{ github.ref_name }}-${{ github.sha }}
          path: build-results.tar
