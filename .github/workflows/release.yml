name: Release

on:
  workflow_call:
    inputs:
      cygport_file:
        description: Path to the cygport file
        required: true
        type: string
      bootstrap_packages:
        description: Cygwin packages required to parse the cygport file
        required: false
        type: string
        default: cygport
      tag_name:
        description: Name of the tag for the release
        required: true
        type: string
    secrets:
      maintainer_key:
        description: RSA private key for uploading to Cygwin servers in OpenSSH format
        required: true

jobs:
  release:
    name: Release to the Cygwin mirrors
    runs-on: windows-latest
    env:
      CYGPORT_FILE: ${{ inputs.cygport_file }}

    steps:
      - name: Configure Git for Windows' core.autocrlf
        run: git config --global core.autocrlf input

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Want to fetch entire history so we can push to the Cygwin Git repos

      - name: Use Cygwin package cache
        uses: actions/cache/restore@v3
        with:
          key: cygwin-packages-${{ github.run_id }}-${{ github.run_attempt }}
          path: C:\cygwin-packages
          restore-keys: |
            cygwin-packages-${{ github.run_id }}-
            cygwin-packages-

      - name: Compute package cache checksum
        working-directory: C:\
        shell: bash
        run: |
          if [[ -d cygwin-packages ]]; then
            find cygwin-packages -type f ! -name setup.ini -print0 |
              sort -z |
              xargs -0 b2sum >cygwin-package-checksum.old
          fi

      - name: Install bootstrap packages
        id: install-bootstrap
        uses: cygwin/cygwin-install-action@db475590d56881c6cef7b3f96f6f3dd9532ea1f4
        with:
          packages: ${{ inputs.bootstrap_packages }}
          add-to-path: false

      - name: Check if package cache needs updating
        if: always() && steps.install-bootstrap.outcome == 'success'
        working-directory: C:\
        shell: bash
        run: |
          if [[ -d cygwin-packages ]]; then
            find cygwin-packages -type f ! -name setup.ini -print0 |
              sort -z |
              xargs -0 b2sum >cygwin-package-checksum.new
            if ! diff cygwin-package-checksum.old cygwin-package-checksum.new; then
              echo UPDATE_CYGWIN_PACKAGE_CACHE=YesPlease | tee -a "$GITHUB_ENV"
            fi
          fi

      - name: Store package cache
        if: always() && env.UPDATE_CYGWIN_PACKAGE_CACHE == 'YesPlease'
        uses: actions/cache/save@v3
        with:
          key: cygwin-packages-${{ github.run_id }}-${{ github.run_attempt }}
          path: C:\cygwin-packages

      - name: Generate cygcheck output
        if: always() && steps.install-bootstrap.outcome != 'skipped'
        run: C:\cygwin\bin\cygcheck.exe -srv >C:\cygwin\var\log\cygcheck.out

      - name: Store Cygwin logs
        if: always() && steps.install-bootstrap.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: cygwin-logs
          path: C:\cygwin\var\log\

      - name: Load data from cygport file
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: |
          vars_cmd=(cygport "$CYGPORT_FILE" vars NAME PF ARCH)
          "${vars_cmd[@]}"
          eval "$("${vars_cmd[@]}")"
          printf 'CYGPORT_NAME=%s\n' "$NAME" | tee -a "$GITHUB_ENV"
          printf 'CYGPORT_PF=%s\n' "$PF" | tee -a "$GITHUB_ENV"
          printf 'CYGPORT_ARCH=%s\n' "$ARCH" | tee -a "$GITHUB_ENV"

      - name: Get build cache
        id: build-cache
        uses: actions/cache/restore@v3
        with:
          key: ${{ env.CYGPORT_NAME }}-build-${{ github.sha }}
          path: build-results.tar

      - name: Abort on cache miss
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: |
          Write-Output "::error::Could not find build cache"
          exit 1

      - name: Unpack the build
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: tar -xf build-results.tar

      - name: Configure SSH
        id: configure-cygwin-ssh
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          MAINTAINER_KEY: ${{ secrets.maintainer_key }}
          PATH: C:\cygwin\bin
        run: |
          umask 0077
          mkdir -p ~/.ssh
          echo "$MAINTAINER_KEY" >~/.ssh/id_rsa
          echo 'cygwin.com,8.43.85.97 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGqrxexIuyqmCVe33p1HuhUFzsXte5QZKb+BJlsRrvXOpUOJEW2S0kszyAiymeV7AXaYmHDKVRJpGVR+0ua0Xww=' >~/.ssh/known_hosts

      - name: Cygport upload
        id: cygport-upload
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: SSH_KEY=~/.ssh/id_rsa cygport "$CYGPORT_FILE" upload

      - name: Remove maintainer key
        if: always() && steps.configure-cygwin-ssh.outcome != 'skipped'
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -e -o pipefail -o igncr {0}
        env:
          PATH: C:\cygwin\bin
        run: rm ~/.ssh/id_rsa

      - name: Store Cygport upload logs
        if: always() && steps.cygport-upload.outcome != 'skipped'
        uses: actions/upload-artifact@v3
        with:
          name: upload.log
          path: ${{ env.CYGPORT_PF }}.${{ env.CYGPORT_ARCH }}/log/*-upload.log
          if-no-files-found: error

      # Do this using Git for Windows, to avoid the need to install Cygwin Git.
      - name: Configure SSH
        id: configure-gfw-ssh
        shell: bash
        env:
          MAINTAINER_KEY: ${{ secrets.maintainer_key }}
        run: |
          umask 0077
          mkdir -p ~/.ssh
          echo "$MAINTAINER_KEY" >~/.ssh/id_rsa
          echo 'cygwin.com,8.43.85.97 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBGqrxexIuyqmCVe33p1HuhUFzsXte5QZKb+BJlsRrvXOpUOJEW2S0kszyAiymeV7AXaYmHDKVRJpGVR+0ua0Xww=' >~/.ssh/known_hosts

      - name: Mirror to the Cygwin Git repositories
        env:
          TAG_NAME: ${{ inputs.tag_name }}
        run: git push "cygwin@cygwin.com:/git/cygwin-packages/$Env:CYGPORT_NAME" tag "$Env:TAG_NAME"

      - name: Remove maintainer key
        if: always() && steps.configure-gfw-ssh.outcome != 'skipped'
        shell: bash
        run: rm ~/.ssh/id_rsa
